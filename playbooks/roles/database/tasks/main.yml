---
# tasks file for database
- name: create a build directory
  tempfile:
    state: directory
    suffix: .build
  register: database_build_directory_output

- name: define variables
  set_fact:
    ibsps_changelog_dir: "{{ ibsps_changelog_output.stdout | trim }}"
    database_build_workspace: "{{ database_build_directory_output.path }}"

- block:
    - name: copy the changelog utilities to the build directory
      copy:
        src: "{{ item }}"
        dest: "{{ database_build_workspace }}"
      with_fileglob:
        - "{{ ibsps_changelog_dir }}/PCK_DBADMIN_CHANGE.pck"
        - "{{ ibsps_changelog_dir }}/run_changelog.pdc"
        - "{{ ibsps_changelog_dir }}/run_grant_synonym.pdc"
        - "{{ ibsps_changelog_dir }}/nbs_changelog*.dmp"

    - name: customize the changelog utilities
      shell: |
        cd "{{ database_build_workspace }}" && \
        sed -i "s/^spool .*.sql.*/spool database_change_grant_synonym.sql;/Ig" run_grant_synonym.pdc && \
        sed -i "s/^spool .*.sql.*/spool database_change.sql;/Ig" run_changelog.pdc && \
        sed -i "/^.*PCK_DBADMIN_CHANGE.P_OUTPUT_CHANGELOG.*/Id" run_changelog.pdc && \
        sed -i "/^spool off.*/i exec PCK_DBADMIN_CHANGE.P_OUTPUT_CHANGELOG_UPGREAD_TO(i_version => '{{ ibsps_db_next_version }}');" run_changelog.pdc && \
        find "$(pwd)" -name "nbs_changelog*.dmp" -exec cp -f "{}" "{{ oracle_dump_directory_path }}" \; -exec echo "{}" \;

      args:
        executable: /bin/bash
      register: customize_changelog_output

    - name: define variables
      set_fact:
        ibsps_changelog_dump: "{{ customize_changelog_output.stdout_lines[0] | trim | basename }}"
        ibsps_db_current_dump: "{{ inventory_hostname }}_{{ ibsps_db_current_version }}.dmp"

    - name: backup the nbs and nbs_common schemas
      shell: |
        cd "{{ database_build_workspace }}" && \
        find "{{ oracle_dump_directory_path }}" -name "{{ ibsps_db_current_dump }}*" -exec rm -f "{}" \;  && \
        "{{ oracle_home }}/bin/expdp" userid=\"/ as sysdba\" directory={{ oracle_dump_directory_name }} dumpfile={{ ibsps_db_current_dump }} logfile={{ ibsps_db_current_dump }}.log schemas=nbs,nbs_common content=all 
        test $? -eq 1 &&  echo "The nbs and nbs_common data backup failed" >&2 && exit 1 
        find "{{ oracle_dump_directory_path }}" -name "{{ ibsps_db_current_dump }}*" -exec cp -f "{}" . \;

      args:
        executable: /bin/bash
      environment:
        ORACLE_HOME: "{{ oracle_home }}"
        ORACLE_SID: "{{ oracle_sid }}"

    - name: import the changelog dump
      shell: |
        "{{ oracle_home }}/bin/impdp" "{{ ibsps_db_account_nbs }}" directory={{ oracle_dump_directory_name }} dumpfile={{ ibsps_changelog_dump }} logfile={{ ibsps_changelog_dump }}.log table_exists_action=REPLACE
        test $? -eq 1 &&  echo "The changelog data import failed" >&2 && exit 1 

      args:
        executable: /bin/bash
      environment:
        ORACLE_HOME: "{{ oracle_home }}"
        ORACLE_SID: "{{ oracle_sid }}"

    - name: genreate the nbs and nbs_common schema refresh scripts
      template:
        src: database_refresh.sh.j2
        dest: "{{ database_build_workspace }}/database_refresh.sh"
        mode: "0755"

    - name: execute the refresh scripts
      shell: "cd '{{ database_build_workspace }}' && ./database_refresh.sh"
      args:
        executable: /bin/bash
      register: database_refresh_output
      environment:
        ORACLE_HOME: "{{ oracle_home }}"
        ORACLE_SID: "{{ oracle_sid }}"

    - name: logging the stdout details
      copy:
        content: "{{ database_refresh_output | to_nice_json }}"
        dest: "{{ database_build_workspace }}/stdout.json"

  rescue:
    - name: logging the stderr details
      copy:
        content: "{{ ansible_failed_result | to_nice_json }}"
        dest: "{{ database_build_workspace }}/stderr.json"

  always:
    - name: create a build history archive file
      archive:
        path: "{{ database_build_workspace }}/*"
        dest: "{{ database_build_workspace }}/{{ inventory_hostname }}_build_history_{{ sysdate }}.zip"
        format: zip

    - name: save the archive file to localhost
      fetch:
        src: "{{ database_build_workspace }}/{{ inventory_hostname }}_build_history_{{ sysdate }}.zip"
        dest: "{{ acd_build_history_path }}/"
        flat: true

    - name: remove the build directory
      file:
        path: "{{ database_build_workspace }}"
        state: absent
